#!/usr/bin/python
# -*- coding: utf-8 -*-

from PyQt4 import QtCore, QtGui
import re

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

# Declare your own MessageBox to make it resizeable
class MyMessageBox(QtGui.QMessageBox):
    def __init__(self):
        QtGui.QMessageBox.__init__(self)
        self.setSizeGripEnabled(True)

    def event(self, e):
        result = QtGui.QMessageBox.event(self, e)

        self.setMinimumHeight(200)
        self.setMaximumHeight(16777215)
        self.setMinimumWidth(800)
        self.setMaximumWidth(16777215)
        self.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)

        textEdit = self.findChild(QtGui.QTextEdit)
        if textEdit != None :
            textEdit.setMinimumHeight(0)
            textEdit.setMaximumHeight(16777215)
            textEdit.setMinimumWidth(0)
            textEdit.setMaximumWidth(16777215)
            textEdit.setSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
        return result
      

class Ui_Dialog(object):
    def setupUi(self, QMessageBox):
        if pos == "1":
            QMessageBox.move(0,  0)

        QMessageBox.setStandardButtons(QMessageBox.Ok)
        self.retranslateUi(QMessageBox)

    def retranslateUi(self, QMessageBox):
        QMessageBox.setWindowTitle(QtGui.QApplication.translate("Dialog", title, None, QtGui.QApplication.UnicodeUTF8))
        QMessageBox.setText(msg_short)
        QMessageBox.setTextFormat(QtCore.Qt.RichText)
        QMessageBox.setDetailedText(msg_detail)
        
if __name__ == "__main__":
    import sys
    import signal

    signal.signal(signal.SIGINT, signal.SIG_DFL)

    syntax_details = """
msgdispatcher_dispatch_x requires 4 manadatory and 1 optional arguments
    1) Message Type = info|warning|error
    2) Title of the message box
    3) Message in the message box
    4) Position of the message (Value 0 or more)
    5) Icon to be used (optional)
"""
    if len(sys.argv) < 5:
       sys.exit("'msgdispatcher_dispatch_x'. Invalid number of options {}".format(syntax_details))  
    app = QtGui.QApplication(sys.argv)
    qm = QtGui.QMessageBox()
    QMessageBox = MyMessageBox()

    # We will use the default QMessageBox icons instead of
    # /usr/share/icons/oxygen/64x64/status/dialog-information.png
    # /usr/share/icons/oxygen/64x64/status/dialog-warning.png
    # /usr/share/icons/oxygen/64x64/status/dialog-error.png
    if str(sys.argv[1]) == "info":
        QMessageBox.setIcon(QMessageBox.Information)
    elif str(sys.argv[1]) == "warning":
        QMessageBox.setIcon(QMessageBox.Warning)
    elif str(sys.argv[1]) == "error":
        QMessageBox.setIcon(QMessageBox.Critical)
    else:
        sys.exit("'msgdispatcher_dispatch_x'. Information type not recognized: %s" % str(sys.argv[1]))

    title = str(sys.argv[2])
    msg = str(sys.argv[3])
    pos = str(sys.argv[4])
    icon = "/path/to/optional/icon"
    if len(sys.argv) == 6:
        icon = str(sys.argv[5])
        QMessageBox.setIconPixmap(QtGui.QPixmap(icon))
        
    # Break only if the string "Possible issue:" is present in the error message
    if "Possible issues:" in msg:
        msg_short = msg.split('Possible issues:')[0]
        msg_detail = "Possible issues:\n"+msg.split('Possible issues:')[1]
    else: # Else show everything at one shot
        msg_short = msg
        msg_detail = "No details present"
   
    # Remove all html tags in a Non-Greedy way
    msg_detail = re.sub('<.*?>','',msg_detail)
    
    ui = Ui_Dialog()
    ui.setupUi(QMessageBox)
    QMessageBox.show()
    sys.exit(app.exec_())

